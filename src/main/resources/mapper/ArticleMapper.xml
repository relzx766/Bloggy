<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zyq.bloggy.mapper.ArticleMapper">
    <resultMap id="baseArticleVoMap" type="com.zyq.bloggy.model.vo.ArticleVo">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="tags" property="tags"
                typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler"/>
        <result column="status" property="status"/>
        <result column="views" property="views"/>
        <result column="comments" property="comments"/>
        <result column="like_num" property="likeNum"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="description" property="description"/>
        <result column="is_sort" property="isSort"/>
        <association property="userVo" javaType="com.zyq.bloggy.model.vo.UserVo">
            <id column="user_id" property="id"/>
            <result property="username" column="username"/>
            <result property="nickname" column="nickname"/>
            <result property="avatar" column="avatar"/>
            <result property="status" column="status"/>
        </association>
    </resultMap>
    <insert id="addArticle">
        insert into tb_article(title, content, author, tags, status, views, comments, like_num, create_time,
                               update_time, description)
        SELECT #{art.title},
               #{art.content},
               #{art.author},
               #{art.tags,typeHandler=com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler},
               #{art.status},
               #{art.views},
               #{art.comments},
               #{art.likeNum},
               #{art.createTime},
               #{art.updateTime},
               #{art.description}
        where exists(select #{art.author} from tb_user where id = #{art.author})
    </insert>
    <insert id="addLike">
        insert into tb_like_article(user_id,article_id,like_time)
        select
        temp2.fromId,temp2.toId, temp2.create_time
        from
        (select temp.fromId,temp.toId,temp.create_time
        from(
        <foreach collection="thumbs" item="item" separator="union">
            select #{item.fromId} as fromId,#{item.toId} as toId,#{item.createTime} as create_time
        </foreach>
        )as temp left join tb_user as tu on tu.id=temp.fromId left join tb_article as ta on
        ta.id=temp.toId
        where tu.id is not null and ta.id is not null)as temp2
        left join tb_like_article tla on tla.user_id=temp2.fromId and tla.article_id=temp2.toId where
        tla.user_id is null
    </insert>
    <update id="updateLikeNum">
        update tb_article
        set like_num=like_num + #{num}
        where id = #{id}
    </update>
    <update id="updateViewNum">
        update tb_article
        set views=views + #{num}
        where id = #{id}
    </update>
    <update id="updateCommentNum">
        update tb_article
        set comments=comments + #{num}
        where id = #{id}
    </update>
    <update id="updateByUserId">
        update tb_article
        <set>
            <if test="article.title != null and article.title!=''">title=#{article.title},</if>
            <if test="article.content != null and article.content!=''">content=#{article.content},</if>
            <if test="article.tags != null">
                tags=#{article.tags,typeHandler=com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler},
            </if>
            <if test="article.description!=null and article.description!=''">description=#{article.description},</if>
            update_time=#{article.updateTime}
        </set>
        where id = #{article.id}
        and author = #{userId}
        and status = 1
    </update>
    <update id="updateStatusById">
        update tb_article
        set status=#{status}
        where id = #{id}
    </update>
    <delete id="delByIdsAndAuthor">
        update tb_article set status=0 where author=#{userId} and id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <delete id="delLike">
        delete from tb_like_article where article_id in (
        select temp.article_id from(
        <foreach collection="thumbs" item="item" separator="union">
            select article_id from tb_like_article where article_id=#{item.toId} and user_id=#{item.fromId}
        </foreach>)temp
        )
    </delete>
    <select id="getByTags" resultMap="baseArticleVoMap">
        select ta.id,
        ta.title,
        ta.author,
        ta.tags,
        ta.status,
        ta.views,
        ta.comments,
        ta.like_num,
        ta.create_time,
        ta.update_time,
        ta.description,
        tu.id as user_id,
        tu.username,
        tu.nickname,
        tu.avatar
        from tb_article ta join tb_user tu on ta.author = tu.id
        where ta.status=1 and json_contains(tags,json_array(
        <foreach collection="tags" item="tag" separator=",">
            #{tag}
        </foreach>
        ), '$')
        limit #{current},#{size}
    </select>
    <select id="getLimited" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
        where ta.status = 1
          and tu.status = 1
        order by ta.views desc
        limit #{current},#{size}
    </select>
    <select id="getCount" resultType="java.lang.Integer">
        select count(*)
        from tb_article;
    </select>
    <select id="getByKeyword" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
        where ta.status = 1
          and tu.status = 1
          and ta.title like CONCAT(CONCAT('%', #{keyword}), '%')
        limit #{current},#{size}
    </select>
    <select id="getCountByKeyword" resultType="java.lang.Integer">
        select count(*)
        from tb_article
        where title like CONCAT(CONCAT('%', #{keyword}), '%')
          and status = 1
    </select>
    <select id="getIsLikeInt" resultType="java.lang.Integer">
        select count(*)
        from tb_like_article
        where user_id = #{userId}
          and article_id = #{articleId}
    </select>
    <select id="getTrend" resultType="com.zyq.bloggy.model.pojo.Article">
        select id,title,views from tb_article where status=1 and id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getLike" resultType="java.lang.Integer">
        select count(*)
        from tb_like_article
        where user_id = #{userId}
          and article_id = #{articleId}
    </select>
    <select id="getDetail" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.content,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
                 left join tb_like_article tla on tla.article_id = ta.id
        where ta.id = #{articleId}
          and ta.status = 1
    </select>
    <select id="getCountByTags" resultType="java.lang.Integer">
        select
        count(id)
        from tb_article
        where status=1 and json_contains(tags,json_array(
        <foreach collection="tags" item="tag" separator=",">
            #{tag}
        </foreach>
        ), '$')
    </select>
    <select id="getArticleLimit" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
        order by ta.id desc
        limit #{current},#{size}
    </select>
    <select id="getById" resultType="com.zyq.bloggy.model.pojo.Article">
        select *
        from tb_article
        where id = #{id}
    </select>
    <select id="getByIds" resultMap="baseArticleVoMap">
        select ta.id,
        ta.title,
        ta.author,
        ta.tags,
        ta.status,
        ta.views,
        ta.comments,
        ta.like_num,
        ta.create_time,
        ta.update_time,
        ta.description,
        tu.id as user_id,
        tu.username,
        tu.nickname,
        tu.avatar
        from tb_article ta
        join tb_user tu on ta.author = tu.id
        where ta.status=1 and ta.id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        order by ta.id desc
    </select>
    <select id="getDetailForAdmin" resultType="com.zyq.bloggy.model.vo.ArticleVo">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.content,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
                 left join tb_like_article tla on tla.article_id = ta.id
        where ta.id = #{articleId}
    </select>
    <select id="getCountRangeByTime" resultType="java.util.Map">
        select date_format(create_time, '%Y-%m-%d') as date, count(id) as count
        from tb_article
        where create_time between #{time} and now()
        group by date_format(create_time, '%Y-%m-%d')

    </select>


</mapper>