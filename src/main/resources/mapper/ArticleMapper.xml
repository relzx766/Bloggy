<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zyq.bloggy.mapper.ArticleMapper">
    <resultMap id="baseArticleVoMap" type="com.zyq.bloggy.vo.ArticleVo">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="tags" property="tags" typeHandler="com.zyq.bloggy.util.JacksonTypeHandler"/>
        <result column="status" property="status"/>
        <result column="views" property="views"/>
        <result column="comments" property="comments"/>
        <result column="like_num" property="likeNum"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="description" property="description"/>
        <association property="userVo" javaType="com.zyq.bloggy.vo.UserVo">
            <id column="user_id" property="id"/>
            <result property="username" column="username"/>
            <result property="nickname" column="nickname"/>
            <result property="avatar" column="avatar"/>
            <result property="status" column="status"/>
        </association>
    </resultMap>
    <insert id="addArticle">
        insert into tb_article(title, content, author, tags, status, views, comments, like_num, create_time,
                               update_time, description)
        SELECT #{art.title},
               #{art.content},
               #{art.author},
               #{art.tags,typeHandler=com.zyq.bloggy.util.JacksonTypeHandler},
               #{art.status},
               #{art.views},
               #{art.comments},
               #{art.likeNum},
               #{art.createTime},
               #{art.updateTime},
               #{art.description}
        where exists(select #{art.author} from tb_user where id = #{art.author})
    </insert>
    <insert id="addLike">
        insert into tb_like_article(user_id, article_id, like_time)
        <foreach collection="thumbs" item="item" separator="union">
            select #{item.fromId},#{item.toId},#{item.createTime}
            where exists(select id from tb_user where id=#{item.fromId})
            and exists(select id from tb_article where id=#{item.toId})
        </foreach>
    </insert>
    <update id="updateLikeNum">
        update tb_article
        set like_num=like_num + #{num}
        where id = #{id}
    </update>
    <update id="updateViewNum">
        update tb_article
        set views=views + #{num}
        where id = #{id}
    </update>
    <update id="updateCommentNum">
        update tb_article
        set comments=comments + #{num}
        where id = #{id}
    </update>
    <delete id="delByIdsAndAuthor">
        update tb_article set status=0 where author=#{userId} and id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <delete id="delLike">
        delete from tb_like_article where article_id in (
        select temp.article_id from(
        <foreach collection="thumbs" item="item" separator="union">
            select article_id from tb_like_article where article_id=#{item.toId} and user_id=#{item.fromId}
        </foreach>)temp
        )
    </delete>
    <select id="getByTags" resultType="com.zyq.bloggy.pojo.Article">
        select *
        from tb_article
        where json_contains(tags, ${tag}, '$');
    </select>
    <select id="getLimited" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
        where ta.status = 1
          and tu.status = 1
        order by ta.create_time desc
        limit #{current},#{size}
    </select>
    <select id="getCount" resultType="java.lang.Integer">
        select count(*)
        from tb_article;
    </select>
    <select id="getByKeyword" resultMap="baseArticleVoMap">
        select ta.id,
               ta.title,
               ta.author,
               ta.tags,
               ta.status,
               ta.views,
               ta.comments,
               ta.like_num,
               ta.create_time,
               ta.update_time,
               ta.description,
               tu.id as user_id,
               tu.username,
               tu.nickname,
               tu.avatar
        from tb_article ta
                 join tb_user tu on ta.author = tu.id
        where ta.status = 1
          and tu.status = 1
          and ta.title like '%'#{keyword}'%'
        limit #{current},#{size}
    </select>
    <select id="getCountByKeyword" resultType="java.lang.Integer">
        select count(*)
        from tb_article
        where title like '%'#{keyword}'%'
    </select>
    <select id="getIsLikeInt" resultType="java.lang.Integer">
        select count(*)
        from tb_like_article
        where user_id = #{userId}
          and article_id = #{articleId}
    </select>
    <select id="getTrend" resultType="com.zyq.bloggy.pojo.Article">
        select id,title,views from tb_article where status=1 and id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

</mapper>